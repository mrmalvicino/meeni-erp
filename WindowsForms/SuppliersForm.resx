<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        e3U28ymL6KEAAAAASUVORK5CYII=
</value>
  </data>
</root>