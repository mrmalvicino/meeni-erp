<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>